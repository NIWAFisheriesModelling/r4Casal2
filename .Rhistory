for(k in 1:nrow(this_method))
this_method$category[k] = paste(expand_category_shorthand(this_method$category[k] , category_labels, category_format = category_format), collapse = ",")
this_method$process = names(process_blocks)[i]
method_df = rbind(method_df, this_method)
}
} else if(tolower(this_process$type$value) == "mortality_instantaneous_retained") {
print("not yet implemented for mortality_instantaneous_retained")
}
i = 15
this_process = process_blocks[[i]]
tolower(this_process$type$value) == "mortality_instantaneous"
m = expand_shorthand_syntax(this_process$m$value)
categories = NULL
for(j in 1:length(this_process$categories$value))
categories = c(categories, expand_category_shorthand(shorthand_categories = this_process$categories$value[j], reference_categories=category_labels, category_format = category_format))
selectivty = NULL
for(j in 1:length(this_process$relative_m_by_age$value))
selectivty = c(selectivty, expand_shorthand_syntax(this_process$relative_m_by_age$value[j]))
M_by_category = rbind(data.frame(process = names(process_blocks)[i], category = categories, M = m, relative_M = selectivty))
time_prop = NULL
if(is.null(this_process$time_step_proportions$value)) {
time_prop = rep(1, nrow(time_step_df))
} else {
time_prop = this_process$time_step_proportions$value
}
time_prop
M_time_steps = rbind(M_time_steps, data.frame(process = names(process_blocks)[i], time_step_proportions = time_prop))
M_time_steps
!is.null(this_process$Table$catches)
this_catch = Reduce(cbind, this_process$Table$catches)
class(this_catch) = "numeric"
colnames(this_catch) = names(this_process$Table$catches)
this_catch = as.data.frame(this_catch)
this_catch$process = names(process_blocks)[i]
catch_df = rbind(catch_df, this_catch)
head(this_catch)
head(catch_df)
this_catch = as.data.frame(this_catch)
this_catch$process = names(process_blocks)[i]
library(reshape2)
melt(this_catch,id.vars = c("year","process"), value.name = "Catch")
## Catch and M
M_by_category = NULL
M_time_steps = NULL
catch_df = NULL
method_df = NULL
for(i in 1:length(process_blocks)) {
this_process = process_blocks[[i]]
if(tolower(this_process$type$value) == "mortality_instantaneous") {
m = expand_shorthand_syntax(this_process$m$value)
categories = NULL
for(j in 1:length(this_process$categories$value))
categories = c(categories, expand_category_shorthand(shorthand_categories = this_process$categories$value[j], reference_categories=category_labels, category_format = category_format))
selectivty = NULL
for(j in 1:length(this_process$relative_m_by_age$value))
selectivty = c(selectivty, expand_shorthand_syntax(this_process$relative_m_by_age$value[j]))
M_by_category = rbind(data.frame(process = names(process_blocks)[i], category = categories, M = m, relative_M = selectivty))
time_prop = NULL
if(is.null(this_process$time_step_proportions$value)) {
time_prop = rep(1, nrow(time_step_df))
} else {
time_prop = this_process$time_step_proportions$value
}
M_time_steps = rbind(M_time_steps, data.frame(process = names(process_blocks)[i], time_step_proportions = time_prop))
## sometimes people add catches as an !include. if that is the case
## we will ignore it: TODO add cod to get all the includes go and get it
if(!is.null(this_process$Table$catches)) {
this_catch = Reduce(cbind, this_process$Table$catches)
class(this_catch) = "numeric"
colnames(this_catch) = names(this_process$Table$catches)
this_catch = as.data.frame(this_catch)
this_catch$process = names(process_blocks)[i]
molten_catch = melt(this_catch,id.vars = c("year","process"), value.name = "catch", variable.name = "fishery")
catch_df = rbind(catch_df, molten_catch)
this_method = Reduce(cbind, this_process$Table$method)
colnames(this_method) = names(this_process$Table$method)
this_method = as.data.frame(this_method, stringsAsFactors = F)
for(k in 1:nrow(this_method))
this_method$category[k] = paste(expand_category_shorthand(this_method$category[k] , category_labels, category_format = category_format), collapse = ",")
this_method$process = names(process_blocks)[i]
method_df = rbind(method_df, this_method)
}
} else if(tolower(this_process$type$value) == "mortality_instantaneous_retained") {
print("not yet implemented for mortality_instantaneous_retained")
}
}
head(catch_df)
library(r4Casal2)
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
document()
document()
document()
library(r4Casal2)
0.71 * 60
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
model = Casal2::extract.mpd("C:\\Users\\marshc\\OneDrive - NIWA\\22_23\\SNA1\\csl\\P30 Base HGBP\\Casal2\\estimate.log")
comp_obs = get_composition_observations(model)
head(comp_obs)
this_ob = this_report$Values
this_ob
names(model)
comp_labels = unique(comp_obs$observation_label)
comp_labels
model = Casal2::extract.mpd("C:\\Users\\marshc\\OneDrive - NIWA\\22_23\\SNA1\\csl\\P30 Base HGBP\\Casal2\\estimate.log")
comp_obs = get_composition_observations(model)
comp_labels = unique(comp_obs$observation_label)
!is.null(observation_labels)
observation_labels = comp_labels[1:6]
!is.null(observation_labels)
observation_labels %in% comp_labels
comp_labels %in% observation_labels
!(observation_labels %in% comp_labels)
observation_labels
comp_labels
(observation_labels %in% comp_labels)
!(observation_labels %in% comp_labels)
any(!(observation_labels %in% comp_labels))
comp_labels = subset(comp_labels, subset = comp_labels %in% observation_labels)
comp_labels
Method.TA1.8
i = 1
weights = vector()
this_weight = Method.TA1.8(model = model, observation_labels = comp_labels[i])
this_weight
comp_labels[i]
weights = vector()
for(i in 1:length(comp_labels)) {
weights[i] = Method.TA1.8(model = model, observation_labels = comp_labels[i], plot.it = F)
}
weights
#'
#' calculate_composition_stage_two_weights
#' @description this function will iterate over all (or a subset of) compositional observations to calculate the method TA 1.8 weights from \insertCite{francis2011data}{r4Casal2}
#' @param model casal2 mpd model
#' @param observation_labels vector<string> of observation labels to calculate the stage two weights for. This function assumes your observation label (@observation) is the same as the report label (@report)
#' @return data.frame of second stage weights
#' @importFrom Rdpack reprompt
#' @importFrom Casal2 Method.TA1.8
#' @references
#' \insertAllCited{}
calculate_composition_stage_two_weights <- function(model, observation_labels = NULL) {
#'
#' calculate_composition_stage_two_weights
#' @description this function will iterate over all (or a subset of) compositional observations to calculate the method TA 1.8 weights from \insertCite{francis2011data}{r4Casal2}
#' @param model casal2 mpd model
#' @param observation_labels vector<string> of observation labels to calculate the stage two weights for. This function assumes your observation label (@observation) is the same as the report label (@report)
#' @return data.frame of second stage weights
#' @importFrom Rdpack reprompt
#' @importFrom Casal2 Method.TA1.8
#' @references
#' \insertAllCited{}
calculate_composition_stage_two_weights <- function(model, observation_labels = NULL) {
#'
#' calculate_composition_stage_two_weights
#' @description this function will iterate over all (or a subset of) compositional observations to calculate the method TA 1.8 weights from \insertCite{francis2011data}{r4Casal2}
#' @param model casal2 mpd model
#' @param observation_labels vector<string> of observation labels to calculate the stage two weights for. This function assumes your observation label (@observation) is the same as the report label (@report)
#' @return data.frame of second stage weights
#' @importFrom Rdpack reprompt
#' @importFrom Casal2 Method.TA1.8
#' @references
#' \insertAllCited{}
calculate_composition_stage_two_weights <- function(model, observation_labels = NULL) {
#model = Casal2::extract.mpd("C:\\Users\\marshc\\OneDrive - NIWA\\22_23\\SNA1\\csl\\P30 Base HGBP\\Casal2\\estimate.log")
comp_obs = get_composition_observations(model)
comp_labels = unique(comp_obs$observation_label)
if(!is.null(observation_labels)) {
if(any(!(observation_labels %in% comp_labels))) {
stop("Could not find some of the observation_labels supplied in model. Please check this or this function.")
}
comp_labels = subset(comp_labels, subset = comp_labels %in% observation_labels)
}
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
## devtools::check() doesn't like how we have put Casal2 in the Suggests:
testthat::test_dir("tests/testthat/")
## build bookdown locally
bookdown::render_book(input = "GitBook/")
install.packages("bayesplot")
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
## build bookdown locally
bookdown::render_book(input = "GitBook/")
config_dir = system.file("extdata", "TestModelComplex", package = "r4Casal2", mustWork = TRUE)
## This function is the key function will read a Casal config file and report useful information
## should be used when describing model structures and assumptions
## as well as validation.
summary = summarise_config(config_dir, config_file = "config.csl2", quiet = T)
names(summary$catch_df)
# file name
mpd_file_name = system.file("extdata", "PosteriorPredictiveChecks","estimate.log",
package = "r4Casal2", mustWork = TRUE)
# read in output
mpd = extract.mpd(file = mpd_file_name)
cov2cor
# check high correlations
correlation_matrix = cov2cor(mpd$covar$covariance_matrix)
get_high_correlations(correlation_matrix = correlation_matrix, max_correlation = 0.8,
labels = names(mpd$estimate_value))
corr_df = get_high_correlations(correlation_matrix = correlation_matrix, max_correlation = 0.8,
labels = names(mpd$estimate_value$values))
corr_df
head(corr_df)
## build bookdown locally
bookdown::render_book(input = "GitBook/")
## build bookdown locally
bookdown::render_book(input = "GitBook/")
library(r4Casal2)
?calculate_composition_stage_two_weights
.libPaths()
library(r4Casal2)
library(r4Casal2)
document()
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
document()
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
## build bookdown locally
bookdown::render_book(input = "GitBook/")
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
library(r4Casal2)
exists
# change the subcommand 'error_value_multiplier'
if(exists(x = "error_value_multiplier", where = this_obs))
exists(x = "error_value_multiplier", where = this_obs)
obs_iter
obs_iter =labels[obs_iter] %in% initial_stage_two_weights$observation
labels[obs_iter] %in% initial_stage_two_weights$observation
obs_iter
obs_iter = 5
labels[obs_iter] %in% initial_stage_two_weights$observation
labels[obs_iter]
obs_ndx
install.packages("C:/Software/CASAL2/R-libraries/Casal2_22.07.tar.gz", repos = NULL, type = "source")
library(r4Casal2)
setwd("C:/Users/marshc/OneDrive - NIWA/22_23/SNA1/R")
#'
library(Casal2)
library(r4Casal2)
model_run = "P30 Base HGBP"
csl_dir = normalizePath(file.path("..", "csl", model_run, "Casal2"))
reweight_folder = "Reweight"
## Don't always want to re-run this code
if(FALSE) {
weights = run_automatic_reweighting(config_dir = csl_dir,
config_filename = "config.csl2",
weighting_folder_name = reweight_folder,
mpd_file_name = "estimate.log",
n_loops = 3)
saveRDS(weights, file = file.path(csl_dir, reweight_folder, "Weights.RDS"))
}
### look at the effect of reweighting
possible_files = list.files(file.path(csl_dir,reweight_folder), pattern = ".log")
estimate_files = possible_files[grep(possible_files, pattern = "estimate_")]
iteration = substring(estimate_files, first = 10)
iteration = as.numeric(sapply(strsplit(iteration, split = "\\."), "[", 1))
MPD_list = list()
for(i in 1:length(estimate_files)) {
MPD_list[[paste0("Weighting-",iteration[i])]] = extract.mpd(path = file.path(csl_dir,reweight_folder), file = estimate_files[i])
}
model = MPD_list
ssb_df = get_derived_quanitites(model)
ssb_df_percent = ssb_df
ssb_df_percent$values = ssb_df_percent$values / ssb_df_percent$initialisation_value * 100
ssb_df$type = "Absolute"
ssb_df_percent$type = "Percent B0"
full_ssb_df = rbind(ssb_df, ssb_df_percent)
ggplot(full_ssb_df, aes(x = years, y = values, col = dq_label, linetype = dq_label)) +
geom_line(size = 2) +
ylim(0, NA) +
labs(colour="Label", linetype = "Label", x = "Years", y = "") +
facet_wrap(~type, scales = "free_y")
library(ggplot2)
ggplot(full_ssb_df, aes(x = years, y = values, col = dq_label, linetype = dq_label)) +
geom_line(size = 2) +
ylim(0, NA) +
labs(colour="Label", linetype = "Label", x = "Years", y = "") +
facet_wrap(~type, scales = "free_y")
head(ssb_df)
ssb_df = get_derived_quanitites(model)
ssb_df_percent = ssb_df
ssb_df_percent$values = ssb_df_percent$values / ssb_df_percent$initialisation_value * 100
ssb_df$type = "Absolute"
ssb_df_percent$type = "Percent B0"
full_ssb_df = rbind(ssb_df, ssb_df_percent)
ggplot(full_ssb_df, aes(x = years, y = values, col = model_label, linetype = model_label)) +
geom_line(size = 2) +
ylim(0, NA) +
labs(colour="Label", linetype = "Label", x = "Years", y = "") +
facet_grid(label~type, scales = "free_y")
ggplot(full_ssb_df, aes(x = years, y = values, col = model_label, linetype = model_label)) +
geom_line(size = 2) +
ylim(0, NA) +
labs(colour="Label", linetype = "Label", x = "Years", y = "") +
facet_wrap(label~type, scales = "free_y")
ggplot(full_ssb_df, aes(x = years, y = values, col = model_label, linetype = model_label)) +
geom_line(size = 2) +
ylim(0, NA) +
labs(colour="Label", linetype = "Label", x = "Years", y = "") +
facet_grid(label~type, scales="free")
library(r4Casal2)
ssb_df = get_derived_quanitites(model)
ssb_df_percent = ssb_df
ssb_df_percent$values = ssb_df_percent$values / ssb_df_percent$initialisation_value * 100
ssb_df$type = "Absolute"
ssb_df_percent$type = "Percent B0"
full_ssb_df = rbind(ssb_df, ssb_df_percent)
ggplot(full_ssb_df, aes(x = years, y = values, col = model_label, linetype = model_label)) +
geom_line(size = 2) +
ylim(0, NA) +
labs(colour="Label", linetype = "Label", x = "Years", y = "") +
facet_grid(label~type, scales="free", ncol = 2)
ggplot(full_ssb_df, aes(x = years, y = values, col = model_label, linetype = model_label)) +
geom_line(size = 2) +
ylim(0, NA) +
labs(colour="Label", linetype = "Label", x = "Years", y = "") +
facet_grid(label~type, scales="free_y", ncol = 2)
ggplot(full_ssb_df, aes(x = years, y = values, col = model_label, linetype = model_label)) +
geom_line(size = 2) +
ylim(0, NA) +
labs(colour="Label", linetype = "Label", x = "Years", y = "") +
facet_wrap(label~type, scales="free_y", ncol = 2)
setwd("C://Software//r4Casal2//R")
plot_derived_quantities.list
library(r4Casal2)
plot_derived_quantities.list
plot_derived_quantities(MPD_list)
plot_fishery(MPD_list)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
document()
library(r4Casal2)
setwd("C:/Users/marshc/OneDrive - NIWA/22_23/SNA1/R")
"C:/Users/marshc/OneDrive - NIWA/22_23/SNA1/R"
#'
library(Casal2)
library(r4Casal2)
model_run = "P30 Base HGBP"
csl_dir = normalizePath(file.path("..", "csl", model_run, "Casal2"))
reweight_folder = "Reweight"
## Don't always want to re-run this code
if(FALSE) {
weights = run_automatic_reweighting(config_dir = csl_dir,
config_filename = "config.csl2",
weighting_folder_name = reweight_folder,
mpd_file_name = "estimate.log",
n_loops = 3)
saveRDS(weights, file = file.path(csl_dir, reweight_folder, "Weights.RDS"))
}
### look at the effect of reweighting
possible_files = list.files(file.path(csl_dir,reweight_folder), pattern = ".log")
estimate_files = possible_files[grep(possible_files, pattern = "estimate_")]
iteration = substring(estimate_files, first = 10)
iteration = as.numeric(sapply(strsplit(iteration, split = "\\."), "[", 1))
MPD_list = list()
for(i in 1:length(estimate_files)) {
MPD_list[[paste0("Weighting-",iteration[i])]] = extract.mpd(path = file.path(csl_dir,reweight_folder), file = estimate_files[i])
}
model = MPD_list
fishery_df = get_fisheries(model)
head(fishery_df)
fishery_df = get_fisheries(model)
ggplot(fishery_df, aes_string(x = "year", y = quantity, col = "model_label")) +
geom_line(size = 2) +
labs(colour="Model", linetype = "Model", x = "Years", y = quantity) +
facet_wrap(~fishery)
quantity = "fishing_pressure"
fishery_df = get_fisheries(model)
ggplot(fishery_df, aes_string(x = "year", y = quantity, col = "model_label")) +
geom_line(size = 2) +
labs(colour="Model", linetype = "Model", x = "Years", y = quantity) +
facet_wrap(~fishery)
ggplot(fishery_df, aes_string(x = "year", y = quantity, col = "model_label", linetype = "model_label")) +
geom_line(size = 2) +
labs(colour="Model", linetype = "Model", x = "Years", y = quantity) +
facet_wrap(~fishery)
fishery_df = get_fisheries(model)
ggplot(fishery_df, aes_string(x = "year", y = quantity, col = "model_label", linetype = "model_label")) +
geom_line(size = 1.5) +
labs(colour="Model", linetype = "Model", x = "Years", y = quantity) +
facet_wrap(~fishery)
document()
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
setwd("C://Software//r4Casal2//R"
)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
getwd()
setwd("C:/Users/marshc/OneDrive - NIWA/22_23/SNA1/R")
recruit_df = get_BH_recruitment(model)
head(recruit_df)
report_label = NULL
recruit_df = get_BH_recruitment(model)
if(!is.null(report_label)) {
recruit_df = subset(recruit_df, subset = label %in% report_label)
}
ggplot(recruit_df, aes_string(x = "year", y = quantity, col = "model_label", linetype = "model_label")) +
geom_line(size = 1.5) +
labs(colour="Model", linetype = "Model", x = "Years", y = quantity) +
facet_wrap(~fishery)
quantity = "ycs_values"
recruit_df = get_BH_recruitment(model)
if(!is.null(report_label)) {
recruit_df = subset(recruit_df, subset = label %in% report_label)
}
ggplot(recruit_df, aes_string(x = "year", y = quantity, col = "model_label", linetype = "model_label")) +
geom_line(size = 1.5) +
labs(colour="Model", linetype = "Model", x = "Years", y = quantity) +
facet_wrap(~fishery)
ggplot(recruit_df, aes_string(x = "year", y = quantity, col = "model_label", linetype = "model_label")) +
geom_line(size = 1.5) +
labs(colour="Model", linetype = "Model", x = "Years", y = quantity) +
facet_wrap(~label)
ggplot(recruit_df, aes_string(x = "ycs_years", y = quantity, col = "model_label", linetype = "model_label")) +
geom_line(size = 1.5) +
labs(colour="Model", linetype = "Model", x = "YCS years", y = quantity) +
facet_wrap(~label)
setwd("C://Software//r4Casal2//R")
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
devtools::install()
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
library(r4Casal2)
document()
## build bookdown locally
bookdown::render_book(input = "GitBook/")
getwd()
setwd("..")
## build bookdown locally
bookdown::render_book(input = "GitBook/")
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
