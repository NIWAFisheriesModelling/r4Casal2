ucl <- mu + 2.66  * stdev
if(nlevels(factor(sign(x)))>1) {
# Make the runs test non-parametric
runstest = runs.test(x,threshold = 0, alternative = test, plot = F)
if(is.na(runstest$p.value)) p.value =0.001
pvalue = round(runstest$p.value,3)} else {
pvalue = 0.001
}
return(list(siglim=c(lcl,ucl),p.runs= pvalue))
}
runs_test_residuals <- function(x, test = "two.sided") {
if(!test %in% c("left.sided","right.sided","two.sided"))
stop('test must be one of c("left.sided","right.sided","two.sided")')
# Average moving range
mu = 0
mr  <- abs(diff(x - mu))
amr <- mean(mr, na.rm = TRUE)
# Upper limit for moving ranges
ulmr <- 3.267 * amr
# Remove moving ranges greater than ulmr and recalculate amr, Nelson 1982
mr  <- mr[mr < ulmr]
amr <- mean(mr, na.rm = TRUE)
# Calculate standard deviation, Montgomery, 6.33
stdev <- amr / 1.128
# Calculate control limits
lcl <- mu - 2.66  * stdev
ucl <- mu + 2.66  * stdev
if(nlevels(factor(sign(x)))>1) {
# Make the runs test non-parametric
runstest = runs.test(x,threshold = 0, alternative = test, plot = F)
if(is.na(runstest$p.value)) p.value =0.001
pvalue = round(runstest$p.value,3)} else {
pvalue = 0.001
}
return(list(siglim=c(lcl,ucl),p.runs= pvalue))
}
max_age_ndx = which.max(this_obs$age)
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
library(r4Casal2)
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
devtools::install()
library(r4Casal2)
r4Casal2::summarise_estimated_parameters()
?summarise_estimated_parameters
rm(summarise_estimated_parameters)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
?UseMethod
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
library(r4Casal2)
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
library(r4Casal2)
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document();
library(r4Casal2)
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document();
library(r4Casal2)
(sapply(strsplit(names(parameter_label), split = "\\["), "[", 2))
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document();
library(r4Casal2)
library(r4Casal2)
.libPaths()
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document();
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document();
library(r4Casal2)
library(r4Casal2)
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document();
library(r4Casal2)
this_report$type != "estimate_value"
library(r4Casal2)
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document();
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document();
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document();
library(r4Casal2)
mpd = NULL
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document();
## build bookdown locally
bookdown::render_book(input = "GitBook/")
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document();
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document();
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document();
library(r4Casal2)
getwd()
## build bookdown locally
bookdown::render_book(input = "GitBook/")
## build bookdown locally
bookdown::render_book(input = "GitBook/")
## build bookdown locally
bookdown::render_book(input = "GitBook/")
## build bookdown locally
bookdown::render_book(input = "GitBook/")
## build bookdown locally
bookdown::render_book(input = "GitBook/")
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document();
library(r4Casal2)
part = c(1000, 900, 800 ,700 ,600 ,500, 400, 700)
part * (1 - exp(-0.5))
exp(-0.5)
(1 - exp(-0.5)
(1 - exp(-0.5))
1000 * 0.3934693
part * ( exp(-0.5))
part * exp(-0.5)^10
part * exp(-0.5)^10
part * exp(-0.5)^8
part * exp(-0.5)^7
log(1/(1:200))
plot(log((1:200),log(1/(1:200)))
)
plot((1:200),log(1/(1:200)))
length(1900:1995)
1996:2015
length((1996:2015)
length((1996:2015))
length(2016:2021)
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document();
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document();
library(r4Casal2)
remove.packages("r4Casal2")
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document();
library(r4Casal2)
remove.packages("r4Casal2")
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document();
library(r4Casal2)
install.packages("devtools")
library(devtools)
setwd(file.path("/nesi", "project", "niwa03347", "AssessmentTools", "r4Casal2"))
devtools::build()
devtools::install()
quit()
getwd()
getwd()
setwd("C:/Users/dattas/OneDrive - NIWA/Projects/2025/FIAR2502 Casal2/StockAssessmentCode")
summary = summarise_config(config_dir = 'data-raw/oysters/Casal2 files/All disease/', config_file = "config.csl2", quiet = T)
library(StockAssessmentCode)
summary = summarise_config(config_dir = 'data-raw/oysters/Casal2 files/All disease/', config_file = "config.csl2", quiet = T)
library(StockAssessmentCode)
summary = summarise_config(config_dir = 'data-raw/oysters/Casal2 files/All disease/', config_file = "config.csl2", quiet = T)
View(summarise_config())
View(summarise_config())
View(summarise_config
View(summarise_config)
getwd()
summary = summarise_config(config_dir = '../StockAssessmentCode/data-raw/oysters/Casal2 files/All disease/', config_file = "config.csl2", quiet = T)
library(StockAssessmentCode)
summary = summarise_config(config_dir = '../StockAssessmentCode/data-raw/oysters/Casal2 files/All disease/', config_file = "config.csl2", quiet = T)
summary = summarise_config(config_dir = '../StockAssessmentCode/data-raw/oysters/Casal2 files/All disease/', config_file = "config.csl2", quiet = T)
View(summarise_config())
View(summarise_config
)
source("C:/Users/dattas/OneDrive - NIWA/Projects/2025/FIAR2502 Casal2/r4Casal2/R/summarise_config.R", echo=TRUE)
summary = summarise_config(config_dir = '../StockAssessmentCode/data-raw/oysters/Casal2 files/All disease/', config_file = "config.csl2", quiet = T)
config_dir = '../StockAssessmentCode/data-raw/oysters/Casal2 files/All disease/'
config_file = "config.csl2"
quiet = T
fileEncoding = ""
if (!file.exists(file.path(config_dir, config_file)))
stop(paste0("Could not find ", config_file, " at ", config_dir))
config_file_in = scan(file = file.path(config_dir, config_file),
what = "", sep = "\n", quiet = T)
config_file_in <- StripComments(config_file_in)
include_lines = grepl(pattern = "!include", config_file_in)
config_file_in = config_file_in[include_lines]
config_file_in = substring(config_file_in, first = 10)
ndx = regexpr("\"", config_file_in) > 0
if (any(ndx)) {
for (i in 1:length(config_file_in)) {
if (ndx[i])
config_file_in[i] <- do.call(file.path, gsub("\"| ","", config_file_in[i]) %>% str_split(pattern = "/") %>% unlist() %>% as.list())
# config_file_in[i] = substring(config_file_in[i],
#                               first = 2, last = nchar(config_file_in[i]) -
#                                 1)
}
}
if (!quiet)
cat("found the following files to read in ", config_file_in,
"\n")
model_block = list()
observation_blocks = list()
derived_quantity_blocks = list()
process_blocks = list()
estimate_blocks = list()
time_steps_list = list()
categories_list = list()
age_length_list = list()
length_weight_list = list()
growth_list = list()
category_labels = NULL
observation_labels = NULL
category_age_lengths = NULL
category_growth_increments = NULL
category_format = NULL
model_years = NULL
model_length_bins = NULL
ages = NULL
time_steps = NULL
length_based_model = F
for (i in 1:length(config_file_in)) {
if (!file.exists(file.path(config_dir, config_file_in[i])))
cat("couldn't find file = ", file.path(config_dir,
config_file_in[i]))
# this_file = tryCatch(extract.csl2.file(path = config_dir,
#                                        file = config_file_in[i], quiet = quiet), error = function(e) {
#                                          e
#                                        }, warning = function(w) {
#                                          w
#                                        })
this_file = tryCatch(extract.csl2.file(file = file.path(config_dir, config_file_in[i]), quiet = quiet), error = function(e) {
e
}, warning = function(w) {
w
})
# test <- extract.csl2.file(file = file.path(config_dir, config_file_in[i]), quiet=TRUE)
if (inherits(this_file, "error") | inherits(this_file,
"warning")) {
cat("failed to readin the following file ", config_file_in[i],
" so skipping it.\n\nthe error\n", this_file$message,
"\n")
next
}
blocks = get_block(names(this_file))
labels = get_label(names(this_file))
for (j in 1:length(this_file)) {
if (tolower(blocks[j]) == "model") {
if (is.null(this_file[[j]]$type)) {
length_based_model = FALSE
}
else {
if (this_file[[j]]$type$value == "length") {
length_based_model = TRUE
}
else {
length_based_model = FALSE
}
}
model_block[["model"]] = this_file[[j]]
model_years = as.numeric(this_file[[j]]$start_year$value):as.numeric(this_file[[j]]$final_year$value)
if (!is.null(this_file[[j]]$min_age))
ages = as.numeric(this_file[[j]]$min_age$value):as.numeric(this_file[[j]]$max_age$value)
time_steps = this_file[[j]]$time_steps$value
if (!is.null(this_file[[j]]$length_bins)) {
for (k in 1:length(this_file[[j]]$length_bins$value)) model_length_bins = c(model_length_bins,
expand_shorthand_syntax(syntax = this_file[[j]]$length_bins$value[k]))
}
}
else if (tolower(blocks[j]) == "time_step") {
time_steps_list[[labels[j]]] = this_file[[j]]$processes$value
}
else if (tolower(blocks[j]) == "categories") {
for (k in 1:length(this_file[[j]]$names$value)) {
category_labels = c(category_labels, expand_category_block(categories = this_file[[j]]$names$value[k]))
}
if (!is.null(this_file[[j]]$age_lengths)) {
for (k in 1:length(this_file[[j]]$age_lengths$value)) {
category_age_lengths = c(category_age_lengths,
expand_shorthand_syntax(syntax = this_file[[j]]$age_lengths$value[k]))
}
}
if (!is.null(this_file[[j]]$growth_increment)) {
for (k in 1:length(this_file[[j]]$growth_increment$value)) {
category_growth_increments = c(category_growth_increments,
expand_shorthand_syntax(syntax = this_file[[j]]$growth_increment$value[k]))
}
}
if (!is.null(this_file[[j]]$format)) {
category_format = this_file[[j]]$format$value
category_format <- str_split(category_format, "\\.") %>% unlist()
category_labels_withFormat <- as_tibble(category_labels) %>%
rename(label = value) %>%
separate(label,  into =category_format, remove = FALSE)
}
}
else if (tolower(blocks[j]) == "age_length") {
age_length_list[[labels[j]]] = this_file[[j]]
}
else if (tolower(blocks[j]) == "growth_increment") {
growth_list[[labels[j]]] = this_file[[j]]
}
else if (tolower(blocks[j]) == "process") {
process_blocks[[labels[j]]] = this_file[[j]]
}
else if (tolower(blocks[j]) == "length_weight") {
length_weight_list[[labels[j]]] = this_file[[j]]
}
else if (tolower(blocks[j]) == "estimate") {
estimate_blocks[[labels[j]]] = this_file[[j]]
}
else if (tolower(blocks[j]) == "observation") {
observation_blocks[[labels[j]]] = this_file[[j]]
observation_labels = c(observation_labels, labels[j])
}
else if (tolower(blocks[j]) == "derived_quantity") {
derived_quantity_blocks[[labels[j]]] = this_file[[j]]
}
}
}
category_df = full_category_df = NULL
age_length_time_step_growth = NULL
for (i in 1:length(category_labels)) {
if (!length_based_model) {
this_age_length = age_length_list[[category_age_lengths[i]]]
this_length_weight = length_weight_list[[this_age_length$length_weight$value]]
distribution = "normal"
if (!is.null(this_age_length$distribution))
distribution = this_age_length$distribution
this_cat_df = data.frame(Category = category_labels[i],
AgeLength = category_age_lengths[i], LengthWeight = this_age_length$length_weight$value,
Distribution = distribution)
this_cat_full_df = data.frame(Category = category_labels[i],
AgeLength = paste0(category_age_lengths[i], " (",
this_age_length$type$value, ")"), LengthWeight = paste0(this_age_length$length_weight$value,
" (", this_length_weight$type$value, ")"),
Distribution = distribution)
category_df = rbind(category_df, this_cat_df)
if (is.null(this_age_length$time_step_proportions$value))
this_age_length$time_step_proportions$value = 0
full_category_df = rbind(full_category_df, this_cat_full_df)
if (is.null(age_length_time_step_growth))
age_length_time_step_growth = rbind(age_length_time_step_growth,
data.frame(AgeLength = category_age_lengths[i],
time_step_proportions = this_age_length$time_step_proportions$value))
if (!category_age_lengths[i] %in% age_length_time_step_growth$AgeLength)
age_length_time_step_growth = rbind(age_length_time_step_growth,
data.frame(AgeLength = category_age_lengths[i],
time_step_proportions = this_age_length$time_step_proportions$value))
}
else {
this_growth = growth_list[[category_growth_increments[i]]]
this_length_weight = length_weight_list[[this_growth$length_weight$value]]
distribution = list(value = "normal")
if (!is.null(this_growth$distribution))
distribution = this_growth$distribution$value # edit to return value
this_cat_df = data.frame(Category = category_labels[i],
GrowthIncrement = category_growth_increments[i],
LengthWeight = this_growth$length_weight$value,
Distribution = distribution)
this_cat_full_df = data.frame(Category = category_labels[i],
GrowthIncrement = paste0(category_growth_increments[i],
" (", this_growth$type$value, ")"), LengthWeight = paste0(this_growth$length_weight$value,
" (", this_length_weight$type$value, ")"),
Distribution = distribution)
category_df = rbind(category_df, this_cat_df)
full_category_df = rbind(full_category_df, this_cat_full_df)
if (is.null(age_length_time_step_growth)) # edit for is.null timestep proportions for growth increment. defaulting to 1
age_length_time_step_growth = rbind(age_length_time_step_growth,
data.frame(GrowthIncrement = category_growth_increments[i],
time_step_proportions = ifelse(is.null(this_growth$time_step_proportions$value), 1, this_growth$time_step_proportions$value)))
if (!category_growth_increments[i] %in% age_length_time_step_growth$GrowthIncrement) # edit for is.null timestep proportions for growth increment. defaulting to 1
age_length_time_step_growth = rbind(age_length_time_step_growth,
data.frame(GrowthIncrement = category_growth_increments[i],
time_step_proportions = ifelse(is.null(this_growth$time_step_proportions$value), 1, this_growth$time_step_proportions$value)))
}
}
i
this_cat_df
category_df
View(summarise_config)
View(summarise_config)
summary = summarise_config(config_dir = 'data-raw/hoki/Base/', config_file = "config.csl2", quiet = T)
summary = summarise_config(config_dir = '../StockAssessmentCode/data-raw/hoki/Base/', config_file = "config.csl2", quiet = T)
library(StockAssessmentCode)
summary = summarise_config(config_dir = '../StockAssessmentCode/data-raw/hoki/Base/', config_file = "config.csl2", quiet = T)
summary$category_df
summary = summarise_config(config_dir = '../StockAssessmentCode/data-raw/oysters/Casal2 files/No disease/')
source("C:/Users/dattas/OneDrive - NIWA/Projects/2025/FIAR2502 Casal2/r4Casal2/R/summarise_config.R", echo=TRUE)
source("C:/Users/dattas/OneDrive - NIWA/Projects/2025/FIAR2502 Casal2/r4Casal2/R/summarise_config.R", echo=TRUE)
summary = summarise_config(config_dir = '../StockAssessmentCode/data-raw/oysters/Casal2 files/No disease/')
View(summarise_config)
summary = summarise_config(config_dir = '../StockAssessmentCode/data-raw/hoki/Base/', config_file = "config.csl2", quiet = T)
summary = summarise_config(config_dir = '../StockAssessmentCode/data-raw/oysters/Casal2 files/No disease/')
remove.packages('r4Casal2')
remotes::install_github("NIWAFisheriesModelling/r4Casal2")
test_that()
