#' \insertAllCited{}
calculate_composition_stage_two_weights <- function(model, observation_labels = NULL) {
#'
#' calculate_composition_stage_two_weights
#' @description this function will iterate over all (or a subset of) compositional observations to calculate the method TA 1.8 weights from \insertCite{francis2011data}{r4Casal2}
#' @param model casal2 mpd model
#' @param observation_labels vector<string> of observation labels to calculate the stage two weights for. This function assumes your observation label (@observation) is the same as the report label (@report)
#' @return data.frame of second stage weights
#' @importFrom Rdpack reprompt
#' @importFrom Casal2 Method.TA1.8
#' @references
#' \insertAllCited{}
calculate_composition_stage_two_weights <- function(model, observation_labels = NULL) {
#'
#' calculate_composition_stage_two_weights
#' @description this function will iterate over all (or a subset of) compositional observations to calculate the method TA 1.8 weights from \insertCite{francis2011data}{r4Casal2}
#' @param model casal2 mpd model
#' @param observation_labels vector<string> of observation labels to calculate the stage two weights for. This function assumes your observation label (@observation) is the same as the report label (@report)
#' @return data.frame of second stage weights
#' @importFrom Rdpack reprompt
#' @importFrom Casal2 Method.TA1.8
#' @references
#' \insertAllCited{}
calculate_composition_stage_two_weights <- function(model, observation_labels = NULL) {
#model = Casal2::extract.mpd("C:\\Users\\marshc\\OneDrive - NIWA\\22_23\\SNA1\\csl\\P30 Base HGBP\\Casal2\\estimate.log")
comp_obs = get_composition_observations(model)
comp_labels = unique(comp_obs$observation_label)
if(!is.null(observation_labels)) {
if(any(!(observation_labels %in% comp_labels))) {
stop("Could not find some of the observation_labels supplied in model. Please check this or this function.")
}
comp_labels = subset(comp_labels, subset = comp_labels %in% observation_labels)
}
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
## devtools::check() doesn't like how we have put Casal2 in the Suggests:
testthat::test_dir("tests/testthat/")
## build bookdown locally
bookdown::render_book(input = "GitBook/")
install.packages("bayesplot")
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
## build bookdown locally
bookdown::render_book(input = "GitBook/")
config_dir = system.file("extdata", "TestModelComplex", package = "r4Casal2", mustWork = TRUE)
## This function is the key function will read a Casal config file and report useful information
## should be used when describing model structures and assumptions
## as well as validation.
summary = summarise_config(config_dir, config_file = "config.csl2", quiet = T)
names(summary$catch_df)
# file name
mpd_file_name = system.file("extdata", "PosteriorPredictiveChecks","estimate.log",
package = "r4Casal2", mustWork = TRUE)
# read in output
mpd = extract.mpd(file = mpd_file_name)
cov2cor
# check high correlations
correlation_matrix = cov2cor(mpd$covar$covariance_matrix)
get_high_correlations(correlation_matrix = correlation_matrix, max_correlation = 0.8,
labels = names(mpd$estimate_value))
corr_df = get_high_correlations(correlation_matrix = correlation_matrix, max_correlation = 0.8,
labels = names(mpd$estimate_value$values))
corr_df
head(corr_df)
## build bookdown locally
bookdown::render_book(input = "GitBook/")
## build bookdown locally
bookdown::render_book(input = "GitBook/")
library(r4Casal2)
?calculate_composition_stage_two_weights
.libPaths()
library(r4Casal2)
library(r4Casal2)
document()
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
document()
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
## build bookdown locally
bookdown::render_book(input = "GitBook/")
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
library(r4Casal2)
exists
# change the subcommand 'error_value_multiplier'
if(exists(x = "error_value_multiplier", where = this_obs))
exists(x = "error_value_multiplier", where = this_obs)
obs_iter
obs_iter =labels[obs_iter] %in% initial_stage_two_weights$observation
labels[obs_iter] %in% initial_stage_two_weights$observation
obs_iter
obs_iter = 5
labels[obs_iter] %in% initial_stage_two_weights$observation
labels[obs_iter]
obs_ndx
install.packages("C:/Software/CASAL2/R-libraries/Casal2_22.07.tar.gz", repos = NULL, type = "source")
library(r4Casal2)
setwd("C:/Users/marshc/OneDrive - NIWA/22_23/SNA1/R")
#'
library(Casal2)
library(r4Casal2)
model_run = "P30 Base HGBP"
csl_dir = normalizePath(file.path("..", "csl", model_run, "Casal2"))
reweight_folder = "Reweight"
## Don't always want to re-run this code
if(FALSE) {
weights = run_automatic_reweighting(config_dir = csl_dir,
config_filename = "config.csl2",
weighting_folder_name = reweight_folder,
mpd_file_name = "estimate.log",
n_loops = 3)
saveRDS(weights, file = file.path(csl_dir, reweight_folder, "Weights.RDS"))
}
### look at the effect of reweighting
possible_files = list.files(file.path(csl_dir,reweight_folder), pattern = ".log")
estimate_files = possible_files[grep(possible_files, pattern = "estimate_")]
iteration = substring(estimate_files, first = 10)
iteration = as.numeric(sapply(strsplit(iteration, split = "\\."), "[", 1))
MPD_list = list()
for(i in 1:length(estimate_files)) {
MPD_list[[paste0("Weighting-",iteration[i])]] = extract.mpd(path = file.path(csl_dir,reweight_folder), file = estimate_files[i])
}
model = MPD_list
ssb_df = get_derived_quanitites(model)
ssb_df_percent = ssb_df
ssb_df_percent$values = ssb_df_percent$values / ssb_df_percent$initialisation_value * 100
ssb_df$type = "Absolute"
ssb_df_percent$type = "Percent B0"
full_ssb_df = rbind(ssb_df, ssb_df_percent)
ggplot(full_ssb_df, aes(x = years, y = values, col = dq_label, linetype = dq_label)) +
geom_line(size = 2) +
ylim(0, NA) +
labs(colour="Label", linetype = "Label", x = "Years", y = "") +
facet_wrap(~type, scales = "free_y")
library(ggplot2)
ggplot(full_ssb_df, aes(x = years, y = values, col = dq_label, linetype = dq_label)) +
geom_line(size = 2) +
ylim(0, NA) +
labs(colour="Label", linetype = "Label", x = "Years", y = "") +
facet_wrap(~type, scales = "free_y")
head(ssb_df)
ssb_df = get_derived_quanitites(model)
ssb_df_percent = ssb_df
ssb_df_percent$values = ssb_df_percent$values / ssb_df_percent$initialisation_value * 100
ssb_df$type = "Absolute"
ssb_df_percent$type = "Percent B0"
full_ssb_df = rbind(ssb_df, ssb_df_percent)
ggplot(full_ssb_df, aes(x = years, y = values, col = model_label, linetype = model_label)) +
geom_line(size = 2) +
ylim(0, NA) +
labs(colour="Label", linetype = "Label", x = "Years", y = "") +
facet_grid(label~type, scales = "free_y")
ggplot(full_ssb_df, aes(x = years, y = values, col = model_label, linetype = model_label)) +
geom_line(size = 2) +
ylim(0, NA) +
labs(colour="Label", linetype = "Label", x = "Years", y = "") +
facet_wrap(label~type, scales = "free_y")
ggplot(full_ssb_df, aes(x = years, y = values, col = model_label, linetype = model_label)) +
geom_line(size = 2) +
ylim(0, NA) +
labs(colour="Label", linetype = "Label", x = "Years", y = "") +
facet_grid(label~type, scales="free")
library(r4Casal2)
ssb_df = get_derived_quanitites(model)
ssb_df_percent = ssb_df
ssb_df_percent$values = ssb_df_percent$values / ssb_df_percent$initialisation_value * 100
ssb_df$type = "Absolute"
ssb_df_percent$type = "Percent B0"
full_ssb_df = rbind(ssb_df, ssb_df_percent)
ggplot(full_ssb_df, aes(x = years, y = values, col = model_label, linetype = model_label)) +
geom_line(size = 2) +
ylim(0, NA) +
labs(colour="Label", linetype = "Label", x = "Years", y = "") +
facet_grid(label~type, scales="free", ncol = 2)
ggplot(full_ssb_df, aes(x = years, y = values, col = model_label, linetype = model_label)) +
geom_line(size = 2) +
ylim(0, NA) +
labs(colour="Label", linetype = "Label", x = "Years", y = "") +
facet_grid(label~type, scales="free_y", ncol = 2)
ggplot(full_ssb_df, aes(x = years, y = values, col = model_label, linetype = model_label)) +
geom_line(size = 2) +
ylim(0, NA) +
labs(colour="Label", linetype = "Label", x = "Years", y = "") +
facet_wrap(label~type, scales="free_y", ncol = 2)
setwd("C://Software//r4Casal2//R")
plot_derived_quantities.list
library(r4Casal2)
plot_derived_quantities.list
plot_derived_quantities(MPD_list)
plot_fishery(MPD_list)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
document()
library(r4Casal2)
setwd("C:/Users/marshc/OneDrive - NIWA/22_23/SNA1/R")
"C:/Users/marshc/OneDrive - NIWA/22_23/SNA1/R"
#'
library(Casal2)
library(r4Casal2)
model_run = "P30 Base HGBP"
csl_dir = normalizePath(file.path("..", "csl", model_run, "Casal2"))
reweight_folder = "Reweight"
## Don't always want to re-run this code
if(FALSE) {
weights = run_automatic_reweighting(config_dir = csl_dir,
config_filename = "config.csl2",
weighting_folder_name = reweight_folder,
mpd_file_name = "estimate.log",
n_loops = 3)
saveRDS(weights, file = file.path(csl_dir, reweight_folder, "Weights.RDS"))
}
### look at the effect of reweighting
possible_files = list.files(file.path(csl_dir,reweight_folder), pattern = ".log")
estimate_files = possible_files[grep(possible_files, pattern = "estimate_")]
iteration = substring(estimate_files, first = 10)
iteration = as.numeric(sapply(strsplit(iteration, split = "\\."), "[", 1))
MPD_list = list()
for(i in 1:length(estimate_files)) {
MPD_list[[paste0("Weighting-",iteration[i])]] = extract.mpd(path = file.path(csl_dir,reweight_folder), file = estimate_files[i])
}
model = MPD_list
fishery_df = get_fisheries(model)
head(fishery_df)
fishery_df = get_fisheries(model)
ggplot(fishery_df, aes_string(x = "year", y = quantity, col = "model_label")) +
geom_line(size = 2) +
labs(colour="Model", linetype = "Model", x = "Years", y = quantity) +
facet_wrap(~fishery)
quantity = "fishing_pressure"
fishery_df = get_fisheries(model)
ggplot(fishery_df, aes_string(x = "year", y = quantity, col = "model_label")) +
geom_line(size = 2) +
labs(colour="Model", linetype = "Model", x = "Years", y = quantity) +
facet_wrap(~fishery)
ggplot(fishery_df, aes_string(x = "year", y = quantity, col = "model_label", linetype = "model_label")) +
geom_line(size = 2) +
labs(colour="Model", linetype = "Model", x = "Years", y = quantity) +
facet_wrap(~fishery)
fishery_df = get_fisheries(model)
ggplot(fishery_df, aes_string(x = "year", y = quantity, col = "model_label", linetype = "model_label")) +
geom_line(size = 1.5) +
labs(colour="Model", linetype = "Model", x = "Years", y = quantity) +
facet_wrap(~fishery)
document()
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
setwd("C://Software//r4Casal2//R"
)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
getwd()
setwd("C:/Users/marshc/OneDrive - NIWA/22_23/SNA1/R")
recruit_df = get_BH_recruitment(model)
head(recruit_df)
report_label = NULL
recruit_df = get_BH_recruitment(model)
if(!is.null(report_label)) {
recruit_df = subset(recruit_df, subset = label %in% report_label)
}
ggplot(recruit_df, aes_string(x = "year", y = quantity, col = "model_label", linetype = "model_label")) +
geom_line(size = 1.5) +
labs(colour="Model", linetype = "Model", x = "Years", y = quantity) +
facet_wrap(~fishery)
quantity = "ycs_values"
recruit_df = get_BH_recruitment(model)
if(!is.null(report_label)) {
recruit_df = subset(recruit_df, subset = label %in% report_label)
}
ggplot(recruit_df, aes_string(x = "year", y = quantity, col = "model_label", linetype = "model_label")) +
geom_line(size = 1.5) +
labs(colour="Model", linetype = "Model", x = "Years", y = quantity) +
facet_wrap(~fishery)
ggplot(recruit_df, aes_string(x = "year", y = quantity, col = "model_label", linetype = "model_label")) +
geom_line(size = 1.5) +
labs(colour="Model", linetype = "Model", x = "Years", y = quantity) +
facet_wrap(~label)
ggplot(recruit_df, aes_string(x = "ycs_years", y = quantity, col = "model_label", linetype = "model_label")) +
geom_line(size = 1.5) +
labs(colour="Model", linetype = "Model", x = "YCS years", y = quantity) +
facet_wrap(~label)
setwd("C://Software//r4Casal2//R")
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
devtools::install()
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
library(r4Casal2)
document()
## build bookdown locally
bookdown::render_book(input = "GitBook/")
getwd()
setwd("..")
## build bookdown locally
bookdown::render_book(input = "GitBook/")
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
getwd()
generate.starting.pars
r4Casal2::generate.starting.pars
Casal2::generate.starting.pars
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
## build bookdown locally
bookdown::render_book(input = "GitBook/")
this_report = model[[i]]
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
library(r4Casal2)
library(r4Casal2)
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
# build package
# this builds all the help files
library(devtools)
library(roxygen2)
document()
library(r4Casal2)
randtests
library(randtests)
install.packages("randtests")
randtests::runs.test
?randtests::runs.test
test = "greater"
!test %in% c("less","greater","two.sided")
test = "greater23"
!test %in% c("less","greater","two.sided")
runs_test_resid <- function(x, test, plot.it = FALSE) {
if(!test %in% c("less","greater","two.sided"))
stop('test must be one of c("less","greater","two.sided")')
# Average moving range
mr  <- abs(diff(x - mu))
amr <- mean(mr, na.rm = TRUE)
# Upper limit for moving ranges
ulmr <- 3.267 * amr
# Remove moving ranges greater than ulmr and recalculate amr, Nelson 1982
mr  <- mr[mr < ulmr]
amr <- mean(mr, na.rm = TRUE)
# Calculate standard deviation, Montgomery, 6.33
stdev <- amr / 1.128
# Calculate control limits
lcl <- mu - 2.66  * stdev
ucl <- mu + 2.66  * stdev
if(nlevels(factor(sign(x)))>1) {
# Make the runs test non-parametric
runstest = runs.test(x,threshold = 0, alternative = test, plot = F)
if(is.na(runstest$p.value)) p.value =0.001
pvalue = round(runstest$p.value,3)} else {
pvalue = 0.001
}
return(list(sig3lim=c(lcl,ucl),p.runs= pvalue))
}
runs_test_residuals <- function(x, test) {
if(!test %in% c("less","greater","two.sided"))
stop('test must be one of c("less","greater","two.sided")')
# Average moving range
mr  <- abs(diff(x - mu))
amr <- mean(mr, na.rm = TRUE)
# Upper limit for moving ranges
ulmr <- 3.267 * amr
# Remove moving ranges greater than ulmr and recalculate amr, Nelson 1982
mr  <- mr[mr < ulmr]
amr <- mean(mr, na.rm = TRUE)
# Calculate standard deviation, Montgomery, 6.33
stdev <- amr / 1.128
# Calculate control limits
lcl <- mu - 2.66  * stdev
ucl <- mu + 2.66  * stdev
if(nlevels(factor(sign(x)))>1) {
# Make the runs test non-parametric
runstest = runs.test(x,threshold = 0, alternative = test, plot = F)
if(is.na(runstest$p.value)) p.value =0.001
pvalue = round(runstest$p.value,3)} else {
pvalue = 0.001
}
return(list(sig3lim=c(lcl,ucl),p.runs= pvalue))
}
#'
#' @importFrom randtests runs.test
#' @details for mean age or length residuals we suggest you use the residuals from the from the logged values.
#' H0: The order of the data is random
#' HA|two.sided: The order of the data is not random
#' HA|right.sided: a trend
#' HA|greater: a first order negative serial correlation
#'
#' @rdname runs_test_residuals
#' @export runs_test_residuals
runs_test_residuals <- function(x, test = "two.sided") {
if(!test %in% c("less","greater","two.sided"))
stop('test must be one of c("left.sided","greater","two.sided")')
# Average moving range
mu = 0
mr  <- abs(diff(x - mu))
amr <- mean(mr, na.rm = TRUE)
# Upper limit for moving ranges
ulmr <- 3.267 * amr
# Remove moving ranges greater than ulmr and recalculate amr, Nelson 1982
mr  <- mr[mr < ulmr]
amr <- mean(mr, na.rm = TRUE)
# Calculate standard deviation, Montgomery, 6.33
stdev <- amr / 1.128
# Calculate control limits
lcl <- mu - 2.66  * stdev
ucl <- mu + 2.66  * stdev
if(nlevels(factor(sign(x)))>1) {
# Make the runs test non-parametric
runstest = runs.test(x,threshold = 0, alternative = test, plot = F)
if(is.na(runstest$p.value)) p.value =0.001
pvalue = round(runstest$p.value,3)} else {
pvalue = 0.001
}
return(list(siglim=c(lcl,ucl),p.runs= pvalue))
}
runs_test_residuals <- function(x, test = "two.sided") {
if(!test %in% c("left.sided","right.sided","two.sided"))
stop('test must be one of c("left.sided","right.sided","two.sided")')
# Average moving range
mu = 0
mr  <- abs(diff(x - mu))
amr <- mean(mr, na.rm = TRUE)
# Upper limit for moving ranges
ulmr <- 3.267 * amr
# Remove moving ranges greater than ulmr and recalculate amr, Nelson 1982
mr  <- mr[mr < ulmr]
amr <- mean(mr, na.rm = TRUE)
# Calculate standard deviation, Montgomery, 6.33
stdev <- amr / 1.128
# Calculate control limits
lcl <- mu - 2.66  * stdev
ucl <- mu + 2.66  * stdev
if(nlevels(factor(sign(x)))>1) {
# Make the runs test non-parametric
runstest = runs.test(x,threshold = 0, alternative = test, plot = F)
if(is.na(runstest$p.value)) p.value =0.001
pvalue = round(runstest$p.value,3)} else {
pvalue = 0.001
}
return(list(siglim=c(lcl,ucl),p.runs= pvalue))
}
max_age_ndx = which.max(this_obs$age)
library(r4Casal2)
